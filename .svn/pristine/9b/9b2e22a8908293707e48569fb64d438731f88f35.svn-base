import six.postgis_driver as driver
from datetime import *
import time


def main():

    t0 = time.time()

    # climate_data_provider = "rtma"
    climate_data_provider = "prism"
    time_rez = "year"

    for year in range(1981,2016):

        # calculate the spring index through this date
        start_date = date(year, 1, 1)
        end_date = date(year, 12, 31)
        forecast_start_date = datetime.now().date()
        forecast_end_date = datetime.now().date()


        plants = ['lilac', 'arnoldred', 'zabelli']
        phenophases = ['leaf', 'bloom']


        if climate_data_provider == 'rtma':
            # driver.Six.load_hourly_climate_data(end_date, "rtma")
            driver.Six.load_daily_climate_data(start_date, end_date, "rtma")
            # TODO pull ndfd data
            driver.Six.load_daily_climate_data(forecast_start_date, forecast_end_date, 'ndfd')
            for plant in plants:
                for phenophase in phenophases:
                    driver.Six.compute_hourly_index(plant, phenophase)
                    driver.Six.create_raster(plant, phenophase, "rtma", end_date, time_rez)
                    driver.Six.postgis_import(plant, phenophase, "rtma", end_date, time_rez)
            driver.Six.cleanup()
        else:
            driver.Six.load_daily_climate_data(start_date, end_date, 'prism')
            for plant in plants:
                for phenophase in phenophases:
                    driver.Six.compute_daily_index(plant, phenophase, "prism")
                    driver.Six.create_raster(plant, phenophase, "prism", end_date, time_rez)
                    driver.Six.postgis_import(plant, phenophase, "prism", end_date, time_rez)
            #compute averages
            driver.Six.leaf_average_array /= len(plants)
            driver.Six.bloom_average_array /= len(plants)
            for phenophase in phenophases:
                driver.Six.create_raster("average", phenophase, "prism", end_date, time_rez)
                driver.Six.postgis_import("average", phenophase, "prism", end_date, time_rez)
            driver.Six.cleanup()

    t1 = time.time()
    print('finished computing spring index:')
    print(t1-t0)

    driver.Six.conn.close()

if __name__ == "__main__":
    main()
