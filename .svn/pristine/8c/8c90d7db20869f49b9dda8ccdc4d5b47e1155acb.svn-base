from datetime import datetime, timedelta
from util.raster import *
from util.database import *
import numpy as np
from datetime import date
import logging


def populate_six_30yr_average(plant, phenophase):
    logging.info(' ')
    logging.info('------------populating spring index 30yr average for %s-----------------', phenophase)
    save_path = cfg["avg_six_path"] + 'six_30yr_average_' + phenophase + os.sep
    os.makedirs(os.path.dirname(save_path), exist_ok=True)

    historic_six_table = 'prism_spring_index'
    six_avg_table_name = 'prism_30yr_avg_spring_index'
    six_avg_array = None

    # calculate average over 30 years by grabbing the year-01-01 map from each year (01-01 represents entire year)
    count = 0
    for year in range(1981, 2011):
        query = """
          SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff')
          FROM %s
          WHERE plant = %s AND rast_date = %s AND phenophase = %s;"""
        data = (AsIs(historic_six_table), plant, str(year)+'-01-01', phenophase)
        result_array = get_raster_from_query(query, data)
        if result_array is None:
            logging.error("Couldn't retrieve spring index for year %s", str(year))
            return
        result_array[result_array == -9999] = 0

        if count is 0:
            (rast_cols, rast_rows, transform, projection, no_data_value) = get_raster_info_from_query(query, data)

        if six_avg_array is None:
            six_avg_array = result_array
        else:
            six_avg_array = six_avg_array + result_array
        count += 1
    six_avg_array /= count
    six_avg_array[six_avg_array < 0] = -9999
    six_avg_array[six_avg_array == 0] = -9999

    # for each doy mask out six values greater than doy and then save the raster and import it to the database
    # because of the nature of the masking we work backwards over the day of year
    new_table = not table_exists(six_avg_table_name)
    for day_of_year in range(365, 0, -1):
        six_avg_array[six_avg_array > day_of_year] = -9999

        # write the raster to disk and import it to the database
        prewarped_file_path = save_path + "six_average_unwarped_{phenophase}_{doy}.tif".format(phenophase=phenophase, doy=day_of_year)
        postwarped_file_path = save_path + "six_average_{phenophase}_{doy}.tif".format(phenophase=phenophase, doy=day_of_year)

        write_raster(prewarped_file_path, six_avg_array, -9999, rast_cols, rast_rows, projection, transform)

        warp_to_rtma_resolution(prewarped_file_path, postwarped_file_path)
        os.remove(prewarped_file_path)

        save_raster_to_postgis(postwarped_file_path, six_avg_table_name, 4269)
        set_plant_column(six_avg_table_name, plant, new_table)
        set_phenophase_column(six_avg_table_name, phenophase, new_table)
        set_doy_column(six_avg_table_name, day_of_year, new_table)
        new_table = False
        logging.info('populated average six %s for day of year: %s', phenophase, str(day_of_year))


def import_six_anomalies(anomaly_date, phenophase):
    logging.info(' ')
    logging.info('-----------------populating spring index anomalies-----------------')

    if phenophase is 'leaf':
        time_series_table_name = 'six_leaf_anomaly'
        save_path = cfg["six_anomaly_path"] + 'six_leaf_anomaly' + os.sep
    elif phenophase is 'bloom':
        time_series_table_name = 'six_bloom_anomaly'
        save_path = cfg["six_anomaly_path"] + 'six_bloom_anomaly' + os.sep
    else:
        logging.error('unsupported phenophase: %s', phenophase)
        return

    os.makedirs(os.path.dirname(save_path), exist_ok=True)

    first_day_of_year = date(anomaly_date.year, 1, 1)
    day = first_day_of_year
    delta = timedelta(days=1)

    plant = 'average'
    six_table_name = 'ncep_spring_index'
    six_avg_table_name = 'prism_30yr_avg_spring_index'
    six_anomaly_table_name = 'six_anomaly'

    new_table = not table_exists(six_anomaly_table_name)
    new_time_series = not table_exists(time_series_table_name)

    (rast_cols, rast_rows, transform, projection, no_data_value) = get_raster_info(six_table_name, first_day_of_year)

    while day <= anomaly_date:
        day_of_year = day.timetuple().tm_yday
        today = datetime.today().date()

        #can't see more than a week into the future
        if day > (today + timedelta(days=8)):
            day += delta
            continue

        # skip if six anomaly has already been computed and is older than 3 days
        # (otherwise recompute it, because newer tmin/tmax files get updated nightly)
        if not new_table and day < (today - timedelta(days=3)) and six_row_exists(six_anomaly_table_name, plant, phenophase, day):
            # logging.info('skipping day %s because it already exists', day.strftime("%Y-%m-%d"))
            day += delta
            continue

        query = """
          SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff')
          FROM %s
          WHERE plant = %s AND rast_date = %s AND phenophase = %s;"""
        data = (AsIs(six_table_name), plant, day.strftime("%Y-%m-%d"), phenophase)
        six = get_raster_from_query(query, data)
        if six is None:
            logging.warning('skipping - could not get spring index for date: %s', day.strftime("%Y-%m-%d"))
            day += delta
            continue

        query = """
          SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff')
          FROM %s
          WHERE plant = %s AND doy = %s AND phenophase = %s;"""
        data = (AsIs(six_avg_table_name), plant, day_of_year, phenophase)
        av_six = get_raster_from_query(query, data)
        if av_six is None:
            logging.warning('skipping - could not get avg spring index for day of year: %s', str(day_of_year))
            day += delta
            return

        six[six == -9999] = 0
        av_six[av_six == -9999] = 0
        diff_six = six - av_six
        diff_six[diff_six == 0] = -9999

        # write the raster to disk and import it to the database
        if phenophase is 'bloom':
            file_name = 'six_bloom_anomaly_' + day.strftime("%Y%m%d") + '.tif'
        else:
            file_name = 'six_leaf_anomaly_' + day.strftime("%Y%m%d") + '.tif'
        file_path = save_path + file_name
        write_raster(file_path, diff_six, -9999, rast_cols, rast_rows, projection, transform)
        save_raster_to_postgis(file_path, six_anomaly_table_name, 4269)
        set_date_column(six_anomaly_table_name, day, new_table)
        set_plant_column(six_anomaly_table_name, plant, new_table)
        set_phenophase_column(six_anomaly_table_name, phenophase, new_table)
        if not new_time_series:
            update_time_series(time_series_table_name, file_name, day)
        new_table = False
        logging.info('populated six %s anomaly for %s based on historical six average for doy %s', phenophase, day.strftime("%Y-%m-%d"), str(day_of_year))

        day += delta
