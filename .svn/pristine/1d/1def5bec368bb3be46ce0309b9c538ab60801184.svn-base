from util.temperature import *
from datetime import datetime, timedelta
from util.raster import *
from util.database import *


with open(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'config.yml')), 'r') as ymlfile:
    cfg = yaml.load(ymlfile)
    save_path = cfg["avg_agdd_path"]


def compute_average_agdd(first_year, last_year):
    (rast_cols, rast_rows, transform, projection, no_data_value) = get_raster_info('prism', 'tmin', datetime(2000, 1, 1))
    agdd = np.zeros((last_year - first_year, rast_rows, rast_cols))
    for day_of_year in range(1,366):
        print('doy: ' + str(day_of_year))
        years_accumulated = 0
        total_over_years = np.zeros((rast_rows, rast_cols))
        for year in range(first_year, last_year):
            year_idx = year - first_year
            print('year: ' + str(year))
            try:
                date_from_doy = date(year, 1, 1) + timedelta(day_of_year - 1)
                print('date_from_doy: ' + date_from_doy.strftime("%Y-%m-%d"))
                tmin = get_climate_data(date_from_doy, 'tmin', 'prism')
                tmax = get_climate_data(date_from_doy, 'tmax', 'prism')

                gdd = (tmin + tmax) / 2 - 32
                gdd[gdd < 0] = 0

                if agdd[year_idx] == None:
                    agdd[year_idx] = gdd
                else:
                    agdd[year_idx] += gdd
                total_over_years += agdd[year_idx]
                years_accumulated += 1
            except():
                print('skipping - not a valid date: year = ' + str(year) + ', doy = ' + str(day_of_year))
        average_agdd = total_over_years / years_accumulated

        prewarped_file_path = save_path + 'agdd_unwarped_' + str(day_of_year) + '.tif'
        postwarped_file_path = save_path + 'agdd_' + str(day_of_year) + '.tif'
        os.makedirs(os.path.dirname(postwarped_file_path), exist_ok=True)
        write_raster(prewarped_file_path, average_agdd, no_data_value, rast_cols, rast_rows, projection, transform)

        warp_to_rtma_resolution(prewarped_file_path, postwarped_file_path)
        os.remove(prewarped_file_path)

        save_raster_to_postgis(postwarped_file_path, "prism_avg_agdd", 4269)


def old_compute_average_agdd(first_year, last_year):
    (rast_cols, rast_rows, transform, projection, no_data_value) = get_raster_info('prism', 'tmin', datetime(2000, 1, 1))
    agdd = np.zeros((last_year - first_year, rast_rows, rast_cols))
    for month in range(1,13):
        for day in range(1,32):
            years_accumulated = 0
            total_over_years = np.zeros((rast_rows, rast_cols))
            for year in range(first_year, last_year):
                year_idx = year - first_year
                print('year: ' + str(year))
                try:
                    date = datetime(year, month, day)
                    tmin = get_climate_data(date, 'tmin', 'prism')
                    tmax = get_climate_data(date, 'tmax', 'prism')

                    gdd = (tmin + tmax) / 2 - 32
                    gdd[gdd < 0] = 0

                    if agdd[year_idx] == None:
                        agdd[year_idx] = gdd
                    else:
                        agdd[year_idx] += gdd
                    total_over_years += agdd[year_idx]
                    years_accumulated += 1
                except():
                    print('skipping - not a valid date: ' + str(year) + '-' + str(month) + '-' + str(day))
            average_agdd = total_over_years / years_accumulated

            prewarped_file_path = save_path + 'agdd_unwarped_' + str(first_year) + "{0:0=2d}".format(month) + "{0:0=2d}".format(day) + '.tif'
            postwarped_file_path = save_path + 'agdd_' + str(first_year) + "{0:0=2d}".format(month) + "{0:0=2d}".format(day) + '.tif'
            os.makedirs(os.path.dirname(postwarped_file_path), exist_ok=True)
            write_raster(prewarped_file_path, average_agdd, no_data_value, rast_cols, rast_rows, projection, transform)

            warp_to_rtma_resolution(prewarped_file_path, postwarped_file_path)
            os.remove(prewarped_file_path)

            save_raster_to_postgis(postwarped_file_path, "prism_avg_agdd", 4269)


def warp_to_rtma_resolution(source_file, dest_file):
    warp_command = "gdalwarp -r bilinear -ts 2606 1228 {source_file} {dest_file}"\
        .format(source_file=source_file, dest_file=dest_file)
    ps = subprocess.Popen(warp_command, stdout=subprocess.PIPE, shell=True)
    ps.wait()


def get_raster_info(climate_data_provider, climate_var, date):
    vsipath = '/vsimem/from_postgis'
    table_name = climate_data_provider + "_" + climate_var + "_" + date.strftime("%Y")

    curs = conn.cursor()

    query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE rast_date = %s;"
    data = (AsIs(table_name), date.strftime("%Y-%m-%d"))
    curs.execute(query, data)

    gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))
    curs.close()

    # Read first band of raster with GDAL
    ds = gdal.Open(vsipath)
    band = ds.GetRasterBand(1)

    # Grab all the info to return
    num_cols = ds.RasterXSize
    num_rows = ds.RasterYSize
    transform = ds.GetGeoTransform()
    projection = ds.GetProjection()
    no_data_value = band.GetNoDataValue()

    # Close and clean up virtual memory file
    gdal.Unlink(vsipath)

    return (num_cols, num_rows, transform, projection, no_data_value)


def get_climate_data(date, climate_var, climate_data_provider):
    # Load raster from postgis into a virtual memory file
    vsipath = '/vsimem/from_postgis'
    table_name = climate_data_provider + "_" + climate_var + "_" + date.strftime("%Y")

    curs = conn.cursor()

    query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE rast_date = %s;"
    data = (AsIs(table_name), date.strftime("%Y-%m-%d"))
    curs.execute(query, data)

    gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))
    curs.close()

    # Read first band of raster with GDAL
    ds = gdal.Open(vsipath)
    band = ds.GetRasterBand(1)

    outarray = band.ReadAsArray()

    # Close and clean up virtual memory file
    gdal.Unlink(vsipath)

    # convert -9999 values to not a number so we don't have to worry about manipulating them
    outarray[outarray == -9999.0] = np.nan

    # convert to fahrenheit
    outarray *= 1.8
    outarray += 32

    return outarray
