import yaml
import psycopg2
from psycopg2.extensions import AsIs
from osgeo import gdal
import os.path


with open("config.yml", 'r') as ymlfile:
    cfg = yaml.load(ymlfile)
db = cfg["postgis"]
conn = psycopg2.connect(dbname=db["db"], port=db["port"], user=db["user"],
                    password=db["password"], host=db["host"])
save_path = cfg["postgis_raster_path"]

def get_six_raster(year, plant, phenophase):
    curs = conn.cursor()
    vsipath = '/vsimem/from_postgis'
    table_name = "spring_index"

    query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE year = %s AND plant = %s AND phenophase = %s;"
    data = (AsIs(table_name), year, plant, phenophase)
    curs.execute(query, data)

    gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))

    ds = gdal.Open(vsipath)
    band = ds.GetRasterBand(1)
    rast_array = band.ReadAsArray()

    geo_transform = ds.GetGeoTransform()
    projection = ds.GetProjection()
    no_data_value = band.GetNoDataValue()

    gdal.Unlink(vsipath)

    cols = rast_array.shape[1]
    rows = rast_array.shape[0]

    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    file_name = save_path + plant + '_' + phenophase + '_' + str(year) + '.tiff'
    driver = gdal.GetDriverByName('Gtiff')
    outRaster = driver.Create(file_name, cols, rows, 1, gdal.GDT_Int16)
    outRaster.SetGeoTransform(geo_transform)
    outband = outRaster.GetRasterBand(1)
    outband.SetNoDataValue(no_data_value)
    outband.WriteArray(rast_array)
    outRaster.SetProjection(projection)
    outband.FlushCache()


def get_prism_raster(year, month, day, climate_var):
    curs = conn.cursor()
    vsipath = '/vsimem/from_postgis'
    table_name = climate_var + '_' + year

    # query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s;"
    query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE rast_date = %s;"
    data = (AsIs(table_name), year + '-' + month + '-' + day)
    curs.execute(query, data)

    gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))

    ds = gdal.Open(vsipath)
    band = ds.GetRasterBand(1)
    rast_array = band.ReadAsArray()

    geo_transform = ds.GetGeoTransform()
    projection = ds.GetProjection()
    no_data_value = band.GetNoDataValue()

    gdal.Unlink(vsipath)

    cols = rast_array.shape[1]
    rows = rast_array.shape[0]

    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    file_name = save_path + 'prism_' + climate_var + '_' + year + '_' + month + '_' + day + '.tiff'
    driver = gdal.GetDriverByName('Gtiff')
    outRaster = driver.Create(file_name, cols, rows, 1, gdal.GDT_Float32)
    outRaster.SetGeoTransform(geo_transform)
    outband = outRaster.GetRasterBand(1)
    outband.SetNoDataValue(no_data_value)
    outband.WriteArray(rast_array)
    outRaster.SetProjection(projection)
    outband.FlushCache()


def get_ndfd_raster(year, month, day, climate_var, resolution):
    curs = conn.cursor()
    vsipath = '/vsimem/from_postgis'
    table_name = climate_var + '_forecast_' + resolution

    # query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s;"
    query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE forecast_date = %s;"
    data = (AsIs(table_name), year + '-' + month + '-' + day)
    curs.execute(query, data)

    gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))

    ds = gdal.Open(vsipath)
    band = ds.GetRasterBand(1)
    rast_array = band.ReadAsArray()

    geo_transform = ds.GetGeoTransform()
    projection = ds.GetProjection()
    no_data_value = band.GetNoDataValue()

    gdal.Unlink(vsipath)

    cols = rast_array.shape[1]
    rows = rast_array.shape[0]

    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    file_name = save_path + 'ndfd_' + climate_var + '_' + year + '_' + month + '_' + day + '_' + resolution + '.tiff'
    driver = gdal.GetDriverByName('Gtiff')
    outRaster = driver.Create(file_name, cols, rows, 1, gdal.GDT_Float64)
    outRaster.SetGeoTransform(geo_transform)
    outband = outRaster.GetRasterBand(1)
    outband.SetNoDataValue(no_data_value)
    outband.WriteArray(rast_array)
    outRaster.SetProjection(projection)
    outband.FlushCache()


def get_rtma_raster(year, month, day, climate_var):
    curs = conn.cursor()
    vsipath = '/vsimem/from_postgis'
    table_name = 'rtma_' + year

    # query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s;"
    query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE rast_date = %s;"
    data = (AsIs(table_name), year + '-' + month + '-' + day)
    curs.execute(query, data)

    gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))

    ds = gdal.Open(vsipath)
    band = ds.GetRasterBand(1)
    rast_array = band.ReadAsArray()

    geo_transform = ds.GetGeoTransform()
    projection = ds.GetProjection()
    no_data_value = band.GetNoDataValue()

    gdal.Unlink(vsipath)

    cols = rast_array.shape[1]
    rows = rast_array.shape[0]

    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    file_name = save_path + 'rtma_' + climate_var + '_' + year + '_' + month + '_' + day + '.tiff'
    driver = gdal.GetDriverByName('Gtiff')
    outRaster = driver.Create(file_name, cols, rows, 1, gdal.GDT_Float64)
    outRaster.SetGeoTransform(geo_transform)
    outband = outRaster.GetRasterBand(1)
    outband.SetNoDataValue(no_data_value)
    outband.WriteArray(rast_array)
    outRaster.SetProjection(projection)
    outband.FlushCache()


if __name__ == "__main__":
    print('this module should be called from get_raster_from_postgis.py')
