#!/usr/bin/python3
import psycopg2
from psycopg2.extensions import AsIs
from osgeo import gdal
import numpy as np
from datetime import date
from datetime import timedelta as td
import subprocess
from six.spring_index import spring_index
import os.path
import yaml
import osr


class Six:
    daystop = 180
    base_temp = 31

    with open(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'config.yml')), 'r') as ymlfile:
        cfg = yaml.load(ymlfile)
    db = cfg["postgis"]
    conn = psycopg2.connect(dbname=db["db"], port=db["port"], user=db["user"],
                        password=db["password"], host=db["host"])
    save_path = cfg["six_path"]

    projection = None
    geo_transform = None
    no_data_value = None
    xdim = 0.04166666666667
    ydim = 0.04166666666667

    min_temps = np.empty((240, 621, 1405))
    max_temps = np.empty((240, 621, 1405))
    result_array = np.empty((621, 1405))
    cols = result_array.shape[1]
    rows = result_array.shape[0]


    @staticmethod
    def load_climate_data(year):
        # Load raster from postgis into a virtual memory file
        curs = Six.conn.cursor()
        vsipath = '/vsimem/from_postgis'
        start_date = date(year, 1, 1)
        table_name = "tmin_" + str(year)
        for day in range(0, 240):
            current_date = start_date + td(days=day)

            query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE rast_date = %s;"
            data = (AsIs(table_name), current_date.strftime("%Y-%m-%d"))
            curs.execute(query, data)

            gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))

            # Read first band of raster with GDAL
            ds = gdal.Open(vsipath)
            band = ds.GetRasterBand(1)
            Six.min_temps[day] = band.ReadAsArray()

        # reshape the array to be station lat, station long, day of year, temperature
        Six.min_temps = np.swapaxes(Six.min_temps, 1, 0)
        Six.min_temps = np.swapaxes(Six.min_temps, 2, 1)

        table_name = "tmax_" + str(year)
        for day in range(0, 240):
            current_date = start_date + td(days=day)
            query = "SELECT ST_AsGDALRaster(ST_Union(rast), 'Gtiff') FROM %s WHERE rast_date = %s;"
            data = (AsIs(table_name), current_date.strftime("%Y-%m-%d"))
            curs.execute(query, data)

            gdal.FileFromMemBuffer(vsipath, bytes(curs.fetchone()[0]))

            # Read first band of raster with GDAL
            ds = gdal.Open(vsipath)
            band = ds.GetRasterBand(1)
            Six.max_temps[day] = band.ReadAsArray()

        # Get geometry information from raster
        Six.geo_transform = ds.GetGeoTransform()

        # Get projection information from raster
        Six.projection = ds.GetProjection()
        # prj = ds.GetProjectionRef()
        # srs = osr.SpatialReference(prj.title())
        # srid = srs.GetAuthorityCode('GEOGCS')

        # Get additional information about the raster
        Six.no_data_value = band.GetNoDataValue()
        # band_minimum = band.GetMinimum()
        # band_maximum = band.GetMaximum()
        # scale = band.GetScale()
        # band_unit_type = band.GetUnitType()

        # Close and clean up virtual memory file
        gdal.Unlink(vsipath)

        # reshape the array to be station lat, station long, day of year, temperature
        Six.max_temps = np.swapaxes(Six.max_temps, 1, 0)
        Six.max_temps = np.swapaxes(Six.max_temps, 2, 1)

        # convert to fahrenheit
        Six.max_temps[Six.max_temps != -9999.0] *= 1.8
        Six.max_temps[Six.max_temps != -9999.0] += 32
        Six.min_temps[Six.min_temps != -9999.0] *= 1.8
        Six.min_temps[Six.min_temps != -9999.0] += 32

    @staticmethod
    def compute_index(plant, phenophase, start_date):
        (upper_left_x, x_size, x_rotation, upper_left_y, y_rotation, y_size) = Six.geo_transform
        Six.result_array = spring_index(Six.max_temps, Six.min_temps, Six.base_temp, start_date, phenophase, plant, upper_left_y, Six.ydim, Six.daystop)

    @staticmethod
    def create_raster(plant, phenophase, year):
        # Create a new raster using the manipulated arrays data
        os.makedirs(os.path.dirname(Six.save_path), exist_ok=True)
        file_name = Six.save_path + plant + '_' + phenophase + '_' + str(year) + '.tiff'
        driver = gdal.GetDriverByName('Gtiff')
        outRaster = driver.Create(file_name, Six.cols, Six.rows, 1, gdal.GDT_Int16)
        outRaster.SetGeoTransform(Six.geo_transform)
        outband = outRaster.GetRasterBand(1)
        outband.SetNoDataValue(Six.no_data_value)
        outband.WriteArray(Six.result_array)
        outRaster.SetProjection(Six.projection)
        outband.FlushCache()

    @staticmethod
    def postgis_import(plant, phenophase, year):
        conn = Six.conn
        curs = conn.cursor()
        file_name = Six.save_path + plant + '_' + phenophase + '_' + str(year) + '.tiff'
        table_name = 'spring_index'
        # check if we need to create a new table
        new_table = True
        query = "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = %s;"
        curs.execute(query, [table_name])
        if curs.fetchone()[0] == 1:
            new_table = False

        # insert the raster (either create a new table or append to previously created table)
        if new_table:
            import_command = "raster2pgsql -s 4269 -c -I -C -M -t auto {file} public.{table}"\
                .format(file=file_name, table=table_name)
        else:
            # overwrite raster if already exists
            query = "DELETE FROM %s WHERE year = %s AND plant = %s AND phenophase = %s;"
            data = (AsIs(table_name), year, plant, phenophase)
            curs.execute(query, data)
            conn.commit()
            import_command = 'raster2pgsql -s 4269 -a -M -t auto ' + file_name + ' public.' + table_name
        import_command2 = "psql -h {host} -p {port} -d {database} --username={user}"\
            .format(host=Six.db["host"], port=Six.db["port"], database=Six.db["db"], user=Six.db["user"])
        ps = subprocess.Popen(import_command, stdout=subprocess.PIPE, shell=True)
        subprocess.check_output(import_command2, stdin=ps.stdout, shell=True)
        ps.wait()

        # possibly set up extra table structure
        if new_table:
            query = "ALTER TABLE %s ADD year smallint, ADD plant text, ADD phenophase text;"
            curs.execute(query, [AsIs(table_name)])
            conn.commit()
        query = "UPDATE %s SET year = %s, plant = %s, phenophase = %s WHERE year IS NULL;"
        data = (AsIs(table_name), year, plant, phenophase)
        curs.execute(query, data)
        conn.commit()

        # create entry in mosaic table (for geoserver to work)
        if new_table:
            query = """
              CREATE TABLE IF NOT EXISTS mosaic(
              name text,
              tiletable text,
              minx float,
              miny float,
              maxx float,
              maxy float,
              resx float,
              resy float);"""
            curs.execute(query)
            conn.commit()

            query = "DELETE FROM mosaic WHERE tiletable = %s"
            curs.execute(query, [table_name])
            conn.commit()

            query = """
              INSERT INTO mosaic (name, tiletable, minx, miny, maxx, maxy, resx, resy)
              VALUES (%s, %s, %s, %s, %s, %s, %s, %s);"""
            data = (table_name, table_name, -125, 49.9166666666687, -66.9, 24.2, 0.04166666666667, 0.04166666666667)
            curs.execute(query, data)
            conn.commit()
