import os.path
from urllib.request import urlretrieve
import urllib
import glob
import ftplib
from datetime import timedelta
import datetime as dt
import numpy as np
from util.database import *
from util.raster import *
from shutil import copy


with open(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'config.yml')), 'r') as ymlfile:
    cfg = yaml.load(ymlfile)
save_path = cfg["rtma_path"]


def download_hourly_temps():
    os.makedirs(save_path, exist_ok=True)

    # delete any files from previous last imports
    for bin_file in glob.glob(save_path + "*.bin"):
        os.remove(bin_file)

    #RTMA
    base_url_temp = 'ftp://tgftp.nws.noaa.gov/SL.us008001/ST.opnl/DF.gr2/DC.ndgd/GT.rtma/AR.conus/'

    #URMA
    # base_url_temp = 'ftp://tgftp.nws.noaa.gov/SL.us008001/ST.opnl/DF.gr2/DC.ndgd/GT.urma/AR.conus/'

    ftp = ftplib.FTP('tgftp.nws.noaa.gov')
    ftp.login()

    for hour in range(0, 24):
        zero_padded_hour = "{0:0=2d}".format(hour)

        # get the last modified date of the server file so that we know which day the raster belongs to
        got_modified = False
        while not got_modified:
            try:
                last_modified = str.split(ftp.sendcmd(
                    "MDTM /SL.us008001/ST.opnl/DF.gr2/DC.ndgd/GT.rtma/AR.conus/RT.{hour}/ds.temp.bin"
                    .format(hour=zero_padded_hour)))[1]
            except ftplib.all_errors as e:
                print('error getting last_modified (retrying): ' + str(e))
            else:
                got_modified = True
        rast_date = last_modified[:8]
        print(last_modified)

        # download the file (we keep retrying if there are network issues)
        url = base_url_temp + 'RT.' + zero_padded_hour + '/ds.temp.bin'
        print('retrieving ' + url)
        retrieved = False
        while not retrieved:
            try:
                urlretrieve(url, save_path + 'temp_' + rast_date + '_' + str(hour) + '.bin')
            except urllib.error.URLError as e:
                print('error retrieving file (retrying): ' + str(e))
            except urllib.error.ContentTooShortError as e:
                print('error retrieving file (retrying): ' + str(e))
            else:
                retrieved = True

    # import all the downloaded rasters to the database
    for bin_file in glob.glob(save_path + "*.bin"):
        # parse out date information from file name
        rast_year = os.path.basename(bin_file).split('_')[1][:4]
        rast_date = os.path.basename(bin_file).split('_')[1]
        rast_hour = os.path.basename(bin_file).split('_')[2].split('.')[0]
        table_name = 'rtma_' + str(rast_year)

        # create new raster with non land areas masked out
        rast = gdal.Open(bin_file)
        rast_band = rast.GetRasterBand(1)
        rast_array = rast_band.ReadAsArray()
        apply_usa_mask(rast_array)
        masked_file_path = save_path + os.path.basename(bin_file).replace('.bin', '.tif')
        write_raster(masked_file_path, rast_array, -9999, 2145, 1377, rast.GetProjection(), rast.GetGeoTransform())

        # import raster to db
        rtma_import(masked_file_path, table_name, True, rast_date, rast_hour)

def download_prevous_hour():
    print('here')


def download_historical_temps(start_date, end_date):

    os.makedirs(save_path, exist_ok=True)
    base_url_temp = 'http://nomads.ncdc.noaa.gov/data/ndgd/'

    delta = end_date - start_date
    year = None
    previous_file_name = None
    previous_temps_array = None

    for i in range(delta.days + 1):
        day = start_date + timedelta(days=i)
        temps = []

        # rtma data is only historical, never look for today or in the future
        if day >= dt.datetime.today().date():
            continue

        # hit a new year
        if year != day.year:
            year = day.year
            hourly_table_name = 'rtma_' + str(year)
            daily_tmin_table_name = "rtma_tmin_" + str(year)
            daily_tmax_table_name = "rtma_tmax_" + str(year)

            # check if tmin table exists for said year
            new_table = not table_exists(daily_tmin_table_name)

            # query db for temps already downloaded for said year, because we don't want to download them again
            retrieved_days = set()
            if not new_table:
                curs = conn.cursor()
                query = "SELECT DISTINCT rast_date FROM %s ;"
                data = [AsIs(daily_tmin_table_name)]
                curs.execute(query, data)
                for record in curs:
                    retrieved_days.add(record[0])

        # loop through days, if not already downloaded get it
        if day not in retrieved_days:
            for hour in range(0, 24):
                file_name = 'LTIA98_KWBR_' + day.strftime("%Y%m%d") + "{0:0=2d}".format(hour) + "00"
                url = base_url_temp + day.strftime("%Y%m") + '/' + day.strftime("%Y%m%d") + '/' \
                      + file_name
                print('retrieving ' + url)
                retrieved = False
                file_not_found = False
                while not retrieved and not file_not_found:
                    try:
                        urlretrieve(url, save_path + file_name)
                    except urllib.error.URLError as e:
                        if str(e) == "HTTP Error 404: Not Found":
                            print("ERROR: file not found so copying last retrieved hour to this hour: " + str(e))
                            file_not_found = True
                        else:
                            print("ERROR: counldn't retrieve file (retrying): " + str(e))
                    except urllib.error.ContentTooShortError as e:
                        print("ERROR: counldn't retrieve file (retrying): " + str(e))
                    else:
                        retrieved = True

                if retrieved:
                    # warp the downloaded raster to EPSG 4269
                    src_ds = gdal.Open(save_path + file_name)

                    # Define target SRS as EPSG 4269
                    dst_srs = osr.SpatialReference()
                    dst_srs.ImportFromEPSG(4269)
                    dst_wkt = dst_srs.ExportToWkt()

                    error_threshold = 0.125  # error threshold --> use same value as in gdalwarp
                    resampling = gdal.GRA_Bilinear #GRA_NearestNeighbour

                    # fetch default values for target raster dimensions and geotransform
                    tmp_ds = gdal.AutoCreateWarpedVRT(src_ds,
                                                      None, # src_wkt : left to default value --> will use the one from source
                                                      dst_wkt,
                                                      resampling,
                                                      error_threshold)

                    dst_ds = gdal.GetDriverByName('GTiff').CreateCopy('warp_test.tif', tmp_ds)

                    # hack to grab the temp band rather than the temp error band
                    # by checking if the mean temp makes any sense (between -30 and 50 celsius)
                    # todo find a better way
                    temp_band_found = False
                    band1 = dst_ds.GetRasterBand(1)
                    band2 = dst_ds.GetRasterBand(2)
                    if band1 is not None:
                        mean = band1.GetStatistics(0,1)[2]
                        if -30 < mean < 50:
                            temps_array = band1.ReadAsArray()
                            temp_band_found = True
                    if band2 is not None:
                        mean = band2.GetStatistics(0,1)[2]
                        if -30 < mean < 50:
                            temps_array = band2.ReadAsArray()
                            temp_band_found = True
                    if not temp_band_found:
                        print('ERROR: temperature band not found, using previous hour')

                    if temp_band_found:
                        projection = dst_ds.GetProjection()
                        transform = dst_ds.GetGeoTransform()

                        # mask out non land areas
                        apply_usa_mask(temps_array)
                        temps.append(temps_array)

                        # write masked file to disk
                        write_raster(save_path + file_name + '.tif', temps_array, -9999, temps_array.shape[1], temps_array.shape[0], projection, transform)

                        # import raster into database
                        rtma_import(save_path + file_name + '.tif', hourly_table_name, True, day, hour)

                        # save in case the next hour (or hours) aren't available
                        if previous_file_name is not None:
                            os.remove(save_path + previous_file_name)
                            os.remove(save_path + previous_file_name + '.tif')
                            # os.remove(save_path + previous_file_name + '.aux.xml')
                        previous_file_name = file_name
                        previous_temps_array = temps_array.copy()

                if not retrieved or not temp_band_found:
                    if previous_temps_array == None or previous_file_name == None:
                        print("ERROR: The first file you tried to retrieve either doesn't exist or doesn't have a temp band. Try rerunning this script starting with an earlier date.")
                        return
                    # copy last successfully retrieved temp band in place of the missing hour
                    temps.append(previous_temps_array)
                    copy(save_path + previous_file_name + '.tif', save_path + file_name + '.tif')
                    rtma_import(save_path + file_name + '.tif', hourly_table_name, True, day, hour)
                    os.remove(save_path + file_name + '.tif')


        # compute tmin and tmax rasters if all 24 hours of temp data is available
        if len(temps) == 24:
            tmin = np.minimum.reduce(temps)
            tmax = np.maximum.reduce(temps)
            tmin_path = save_path + 'tmin_' + day.strftime("%Y%m%d") + '.tif'
            tmax_path = save_path + 'tmax_' + day.strftime("%Y%m%d") + '.tif'
            write_raster(tmin_path, tmin, -9999, tmin.shape[1], tmin.shape[0], projection, transform)
            write_raster(tmax_path, tmax, -9999, tmax.shape[1], tmax.shape[0], projection, transform)

            # save tmin/tmax rasters to the db
            rtma_import(tmin_path, daily_tmin_table_name, False, day, None)
            rtma_import(tmax_path, daily_tmax_table_name, False, day, None)

            os.remove(tmin_path)
            os.remove(tmax_path)


def rtma_import(rast_path, table_name, hourly, date, hour):
    curs = conn.cursor()
    new_table = not table_exists(table_name)

    save_raster_to_postgis(rast_path, table_name, None)

    if new_table:
        # create entry in mosaic table (for geoserver to work)
        # add_mosaic_entry(table_name, -2764486.928, -265060.521, 2683176.007, 3232110.510, 2539.703000000000000, 2539.703000000000000)
        add_mosaic_entry(table_name, -130.1228935, 52.8168964, -60.8601260, 20.1788770, 0.026578191679851, 0.026578191679851)

        # add rast_date and possible rast_hour columns
        query = "ALTER TABLE %(table)s ADD rast_date DATE;"
        curs.execute(query, {"table": AsIs(table_name)})
        query = "CREATE INDEX ON %(table)s (rast_date);"
        curs.execute(query, {"table": AsIs(table_name)})
        query = "CREATE INDEX ON %(table)s (filename);"
        curs.execute(query, {"table": AsIs(table_name)})
        if hourly:
            query = "ALTER TABLE %(table)s ADD rast_hour INTEGER;"
            curs.execute(query, {"table": AsIs(table_name)})
        conn.commit()

    query = "UPDATE %(table)s SET rast_date = to_date(%(rast_date)s, 'YYYYMMDD') WHERE rast_date IS NULL;"
    data = {"table": AsIs(table_name), "rast_date": date.strftime("%Y%m%d")}
    curs.execute(query, data)

    if hourly:
        query = "UPDATE %(table)s SET rast_hour = %(rast_hour)s WHERE rast_hour IS NULL;"
        data = {"table": AsIs(table_name), "rast_hour": "{0:0=2d}".format(hour)}
        curs.execute(query, data)

    conn.commit()


if __name__ == "__main__":
    download_hourly_temps()
