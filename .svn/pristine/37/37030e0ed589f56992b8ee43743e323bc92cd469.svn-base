import yaml
import psycopg2
from psycopg2.extensions import AsIs
import os.path
import subprocess
from urllib.request import urlretrieve
import glob
from ftplib import FTP


with open(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'config.yml')), 'r') as ymlfile:
    cfg = yaml.load(ymlfile)
db = cfg["postgis"]
conn = psycopg2.connect(dbname=db["db"], port=db["port"], user=db["user"],
                        password=db["password"], host=db["host"])
curs = conn.cursor()

save_path = cfg["rtma_path"]


def download_hourly_temps():
    os.makedirs(save_path, exist_ok=True)

    # delete any files from previous last imports
    for bin_file in glob.glob(save_path + "*.bin"):
        os.remove(bin_file)

    base_url_temp = 'ftp://tgftp.nws.noaa.gov/SL.us008001/ST.opnl/DF.gr2/DC.ndgd/GT.rtma/AR.conus/'

    ftp = FTP('tgftp.nws.noaa.gov')
    ftp.login()

    for hour in range(0, 2):
        last_modified = str.split(ftp.sendcmd('MDTM '+ '/SL.us008001/ST.opnl/DF.gr2/DC.ndgd/GT.rtma/AR.conus/' + 'RT.' + "{0:0=2d}".format(hour) + '/ds.temp.bin'))[1]
        rast_date = last_modified[:8]
        print(last_modified)
        url = base_url_temp + 'RT.' + "{0:0=2d}".format(hour) + '/ds.temp.bin'
        print('retrieving ' + url)
        urlretrieve(url, save_path + 'temp_' + rast_date + '_' + str(hour) + '.bin')


def postgis_import():
    for bin_file in glob.glob(save_path + "*.bin"):
        rast_year = os.path.basename(bin_file).split('_')[1][:4]
        table_name = 'rtma_' + rast_year
        new_table = True
        query = "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = %s;"
        curs.execute(query, [table_name])
        if curs.fetchone()[0] == 1:
            new_table = False

        # remove old entry if already exists
        if not new_table:
            query = "DELETE FROM %(table)s WHERE filename = %(filename)s;"
            data = {"table": AsIs(table_name), "filename": os.path.basename(bin_file)}
            curs.execute(query, data)
            conn.commit()

        # insert the raster (either create a new table or append to previously created table)
        if new_table:
            import_command = "raster2pgsql -s 4269 -c -I -C -M -F -t auto {file} public.{table}"\
                .format(file=bin_file, table=table_name)
        else:
            import_command = "raster2pgsql -s 4269 -a -M -F -t auto {file} public.{table}"\
                .format(file=bin_file, table=table_name)
        import_command2 = "psql -h {host} -p {port} -d {database} -U {user} --no-password"\
            .format(host=db["host"], port=db["port"], database=db["db"], user=db["user"])
        ps = subprocess.Popen(import_command, stdout=subprocess.PIPE, shell=True)
        subprocess.check_output(import_command2, stdin=ps.stdout, shell=True)
        ps.wait()

        # possibly set up extra table structure
        if new_table:
            query = "ALTER TABLE %(table)s ADD rast_date DATE;"
            curs.execute(query, {"table": AsIs(table_name)})
            query = "ALTER TABLE %(table)s ADD rast_hour INTEGER;"
            curs.execute(query, {"table": AsIs(table_name)})
            conn.commit()

        rast_date = os.path.basename(bin_file).split('_')[1]
        query = "UPDATE %(table)s SET rast_date = to_date(%(rast_date)s, 'YYYYMMDD') WHERE rast_date IS NULL;"
        data = {"table": AsIs(table_name), "rast_date": rast_date}
        curs.execute(query, data)

        rast_hour = os.path.basename(bin_file).split('_')[2].split('.')[0]
        query = "UPDATE %(table)s SET rast_hour = %(rast_hour)s WHERE rast_hour IS NULL;"
        data = {"table": AsIs(table_name), "rast_hour": rast_hour}
        curs.execute(query, data)

        conn.commit()

        # create entry in mosaic table (for geoserver to work)
        if new_table:
            query = """
              CREATE TABLE IF NOT EXISTS mosaic(
              name text,
              tiletable text,
              minx float,
              miny float,
              maxx float,
              maxy float,
              resx float,
              resy float);"""
            curs.execute(query)
            conn.commit()

            query = "DELETE FROM mosaic WHERE tiletable = %s"
            curs.execute(query, [table_name])
            conn.commit()

            query = """
              INSERT INTO mosaic (name, tiletable, minx, miny, maxx, maxy, resx, resy)
              VALUES (%s, %s, %s, %s, %s, %s, %s, %s);"""
            data = (table_name, table_name, -2764486.928, -265060.521, 2683176.007, 3232110.510, 2539.703000000000000, 2539.703000000000000)
            curs.execute(query, data)
            conn.commit()


if __name__ == "__main__":
    download_hourly_temps()
    postgis_import()
