#!/usr/bin/python3
from climate.importer import *
from util.gdd import *
from datetime import date
import logging


def main():
    logging.basicConfig(filename='gridded_models_nightly_update.log',
                        level=logging.INFO,
                        format='%(asctime)s %(message)s',
                        datefmt='%m/%d/%Y %I:%M:%S %p')
    t0 = time.time()

    logging.info('***********beginning script gridded_models_nightly_update.py***********')

    # download and import ndfd forecast temps for the next week
    # overwrites all files previously downloaded files
    download_forecast()

    # downloads hourly rtma temps into our postgis db for the past 24 hours (each hour represents GMT)
    # overwrites all files previously downloaded files
    download_hourly_temps('rtma')
    download_hourly_temps('urma')

    # download and import rtma data for the date range (never looks for days past yesterday)
    # won't overwrite any previously downloaded files
    start = date(2015, 1, 1)
    end = date(2016, 1, 1)
    download_historical_temps(start, end)

    # compute daily tmin/tmax based on hourly data
    # computation is based on mixture of rtma and urma data; rtma is only used when urma isn't available
    # overwrites files less than 4 days old so the flow of tmin/tmax through time goes from
    # urma -> urma/rtma -> forecast
    start = date(2015, 1, 1)
    end = date(2016, 1, 1)
    hour_shift = -12 # makes data match prism (prism day goes from -12 utc to +12 utc
    compute_tmin_tmax(start, end, hour_shift)

    # populate agdds for year
    # files older than 3 days won't get overwritten, but newer ones will due to tmin/tmax updates
    agdd_date = date(2015, 12, 31)
    import_agdd(agdd_date)

    # populate agdd anomalies
    # files older than 3 days won't get overwritten, but newer ones will due to tmin/tmax updates
    agdd_anom_date = date(2015, 12, 31)
    import_agdd_anomalies(agdd_anom_date)

    t1 = time.time()
    logging.info('***********gridded_models_nightly_update.py finished in %s seconds***********', t1-t0)


if __name__ == "__main__":
    main()
