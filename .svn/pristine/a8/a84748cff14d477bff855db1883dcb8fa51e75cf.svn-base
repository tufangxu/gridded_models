import yaml
import psycopg2
from psycopg2.extensions import AsIs
import os.path
import subprocess


with open(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'config.yml')), 'r') as ymlfile:
    cfg = yaml.load(ymlfile)
db = cfg["postgis"]
conn = psycopg2.connect(dbname=db["db"], port=db["port"], user=db["user"],
                        password=db["password"], host=db["host"])
curs = conn.cursor()


def table_exists(table_name):
    query = "SELECT COUNT(*) FROM information_schema.tables WHERE table_name = %s;"
    curs.execute(query, [table_name])
    if curs.fetchone()[0] == 1:
        return True
    else:
        return False


def save_raster_to_postgis(raster_path, table_name):
    new_table = not table_exists(table_name)

    # remove old entry if already exists
    if not new_table:
        query = "DELETE FROM %(table)s WHERE filename = %(filename)s;"
        data = {"table": AsIs(table_name), "filename": os.path.basename(raster_path)}
        curs.execute(query, data)
        conn.commit()

    # insert the raster (either create a new table or append to previously created table)
    if new_table:
        import_command = "raster2pgsql -s 4269 -c -I -C -M -F -t auto {file} public.{table}"\
            .format(file=raster_path, table=table_name)
    else:
        import_command = "raster2pgsql -s 4269 -a -M -F -t auto {file} public.{table}"\
            .format(file=raster_path, table=table_name)
    import_command2 = "psql -h {host} -p {port} -d {database} -U {user} --no-password"\
        .format(host=db["host"], port=db["port"], database=db["db"], user=db["user"])
    ps = subprocess.Popen(import_command, stdout=subprocess.PIPE, shell=True)
    subprocess.check_output(import_command2, stdin=ps.stdout, shell=True)
    ps.wait()


def add_mosaic_entry(table_name, minx, miny, maxx, maxy, resx, resy):
    query = """
      CREATE TABLE IF NOT EXISTS mosaic(
      name text,
      tiletable text,
      minx float,
      miny float,
      maxx float,
      maxy float,
      resx float,
      resy float);"""
    curs.execute(query)
    conn.commit()

    query = "DELETE FROM mosaic WHERE tiletable = %s"
    curs.execute(query, [table_name])
    conn.commit()

    query = """
      INSERT INTO mosaic (name, tiletable, minx, miny, maxx, maxy, resx, resy)
      VALUES (%s, %s, %s, %s, %s, %s, %s, %s);"""
    data = (table_name, table_name, minx, miny, maxx, maxy, resx, resy)
    curs.execute(query, data)
    conn.commit()
